#!/bin/bash
# This script mounts USB mass storage devices when they are plugged in
# and umounts them when they are removed.
# Copyright © 2004, 2005 Martin Dickopp
# Copyright © 2008, 2009, 2010 Rogério Theodoro de Brito
#
# This file is free software; the copyright holder gives unlimited
# permission to copy and/or distribute it, with or without
# modifications, as long as this notice is preserved.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.
#
set -e
exec > /dev/null 2>&1

# Default values for configuration variables.
ENABLED=1
MOUNTROOT=/mnt/usb
FILESYSTEMS=
MOUNTOPTIONS=
FS_MOUNTOPTIONS=
VERBOSE=no
COOKIE=/run/usbmount/

######################################################################
# Auxiliary functions

# Log a string via the syslog facility.
log() {
    if [ $1 != debug ] || expr "$VERBOSE" : "[yY]" > /dev/null; then
        logger -p user.$1 -t "usbmount[$$]" -- "$2"
    fi
}


# Test if the first parameter is in the list given by the second
# parameter.
in_list() {
    for v in $2; do
        [ "$1" != "$v" ] || return 0
    done
    return 1
}

######################################################################
# Main functions

do_mount() {
    BLKNAME="$1"
    DEVNAME="/dev/$BLKNAME"

    DEVINFO=$(/sbin/blkid -p $DEVNAME)
    USAGE=$(echo "$DEVINFO"  | sed 's/.*[[:blank:]]USAGE="\([^"]*\)".*/\1/g; s/[[:blank:]]*//g;')
    if ! echo $USAGE | egrep -q "(filesystem|disklabel)"; then
        log info "$DEVNAME does not contain a filesystem or disklabel"
        exit 1
    fi
    FSTYPE=$(echo "$DEVINFO" | sed 's/.*[[:blank:]]TYPE="\([^"]*\)".*/\1/g; s/[[:blank:]]*//g;')
    LABEL=$(echo "$DEVINFO"  | sed 's/.*[[:blank:]]LABEL="\([^"]*\)".*/\1/g')
    UUID=$(echo "$DEVINFO"   | sed 's/.*[[:blank:]]UUID="\([^"]*\)".*/\1/g; s/[[:blank:]]*//g;')

    # Try to use specifications in /etc/fstab first.
    if egrep -q "^[[:blank:]]*$DEVNAME" /etc/fstab; then
        log info "executing command: mount $DEVNAME"
        mount $DEVNAME || log err "mount by DEVNAME with $DEVNAME wasn't successful; return code $?"

    elif grep -q "^[[:blank:]]*UUID=$UUID" /etc/fstab; then
        log info "executing command: mount -U $UUID"
        mount -U $UUID || log err "mount by UUID with $UUID wasn't successful; return code $?"

    elif grep -q "^[[:blank:]]*LABEL=$LABEL" /etc/fstab; then
        log info "executing command: mount -L $LABEL"
        mount -L $LABEL || log err "mount by LABEL with $LABEL wasn't successful; return code $?"

    else
        log debug "$DEVNAME contains filesystem type $FSTYPE"

        fstype=$FSTYPE
        # Test if the filesystem type is in the list of filesystem
        # types to mount.
        if ! in_list "$fstype" "$FILESYSTEMS"; then
            log info "don't support fstype $fstype"
            exit 0
        fi

        # Search an available mountpoint.
        mountpoint=
        for v in "$LABEL" "$BLKNAME" "$UUID"; do
            v="$MOUNTROOT/$v"
            if [ ! -e "$v" -o -d "$v" ] && ! grep -q "^[^ ][^ ]*  *$v " /proc/mounts; then
                mountpoint="$v"
                break
            fi
        done
        if [ -z "$mountpoint" ]; then
            log warning "no mountpoint found for $DEVNAME"
            exit 1
        fi

        mkdir -p "$mountpoint"
        log debug "mountpoint $mountpoint is available for $DEVNAME"

        # Determine mount options.
        options=
        for v in $FS_MOUNTOPTIONS; do
            if expr "$v" : "-fstype=$fstype,."; then
                options="$(echo "$v" | sed 's/^[^,]*,//')"
                break
            fi
        done
        if [ -n "$MOUNTOPTIONS" ]; then
            options="$MOUNTOPTIONS${options:+,$options}"
        fi

        # Mount the filesystem.
        log info "executing command: mount -t$fstype ${options:+-o$options} $DEVNAME $mountpoint"
        mount -t$fstype ${options:+-o$options} $DEVNAME $mountpoint

        # Record this mountpoint
        echo "$fstype $DEVNAME $mountpoint" > "$COOKIE/$BLKNAME"

        # Run hook scripts; ignore errors.
        export DEVICE="$DEVNAME"
        export MOUNTPOINT="$mountpoint"
        export FILESYSTEM="$fstype"
        export MOUNTOPTIONS="$options"
        log info "executing command: run-parts /etc/usbmount/mount.d"
        run-parts /etc/usbmount/mount.d || :
    fi
}

do_umount() {
    BLKNAME="$1"
    if [ -r "$COOKIE/$BLKNAME" ]; then
        read fstype devname mountpoint < "$COOKIE/$BLKNAME"

        log info "executing command: umount -Rl $mountpoint"
        # ignore error
        umount -Rl "$mountpoint" || :

        rm -rf "$COOKIE/$BLKNAME"
        rm -rf "$mountpoint"

        # Run hook scripts; ignore errors.
        export FILESYSTEM="$fstype"
        export DEVICE="$devname"
        export MOUNTPOINT="$mountpoint"
        log info "executing command: run-parts /etc/usbmount/umount.d"
        run-parts /etc/usbmount/umount.d || :
    fi
}

######################################################################
# Main program

if [ -r /etc/usbmount/usbmount.conf ]; then
    . /etc/usbmount/usbmount.conf
    log debug "loaded usbmount configurations"
fi

if [ "${ENABLED:-1}" -eq 0 ]; then
    log info "usbmount is disabled, see /etc/usbmount/usbmount.conf"
    exit 0
fi

if [ ! -x /sbin/blkid ]; then
    log err "cannot execute /sbin/blkid"
    exit 1
fi

mkdir -p $COOKIE
log debug "creating $COOKIE directory"

umask 022

case "$1" in
    add)      do_mount $2 ;;
    remove)   do_umount $2 ;;
    *)
        log err "unexpected: action '$1'"
        exit 1
        ;;
esac

log debug "usbmount execution finished"
